@startuml personal_trainer
skinparam actorStyle Hollow 
skinparam usecase {
BackgroundColor DarkSeaGreen
BorderColor DarkSlateGray

BackgroundColor<< Main >> YellowGreen 
BorderColor<< Main >> YellowGreen 

ArrowColor tan 
ActorBorderColor black
ActorFontName Courier

ActorBackgroundColor<< Human >> Black
}
left to right direction
actor Personal_Trainer
rectangle CalorieTracker {
  (Login)
  (Register)
  (View Saved Diet from Professionals)
  (View Main Menu Where Foods Can be Added to Daily Intake)
  (View and Add Foods to Tracker by Search Criteria)
  (View Daily Food Intake)
  (View Total Daily Calories)
  (View Total Daily Protein)
  (View Total Daily Carbohydrates)
  (View Total Daily Fats)
  (Exit Back to Main Menu)
  (Save Diet)
  (Logout)
}
Personal_Trainer --> (Login) : Seeing as the Personal_Trainer might need to save the diet to their customer's account, logging in to the customer's account directly would be more effecient
Personal_Trainer --> (Register) : Making an account with their customer if they don't already have one is also a smart idea
Personal_Trainer --> (View Main Menu Where Foods Can be Added to Daily Intake) : This is where the Personal_Trainer would make their customer's diet
Personal_Trainer --> (View and Add Foods to Tracker by Search Criteria) : In case the customer has special diet requirements
Personal_Trainer --> (View Daily Food Intake)
Personal_Trainer --> (View Total Daily Calories)
Personal_Trainer --> (View Total Daily Protein)
Personal_Trainer --> (View Total Daily Carbohydrates)
Personal_Trainer --> (View Total Daily Fats)
Personal_Trainer --> (Exit Back to Main Menu)
Personal_Trainer --> (Save Diet) : See if the diet aligns with all the correct macronutrients before doing so
Personal_Trainer --> (Logout)
@enduml